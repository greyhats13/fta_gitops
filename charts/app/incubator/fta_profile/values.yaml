# Default values for fta-dev-svc-profile.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: greyhats13/fta_profile
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""
appConfig:
  annotations:
    configmap-hash: '{{ include (print $.Template.BasePath "configmap.yaml") . | sha256sum }}'
  ## Application configuration
  APP_HOST: "0.0.0.0"
  APP_PORT: "8000"
  APP_LOG_LEVEL: "error"
  APP_ENV: "dev"
  APP_NAME: "fta_profile"
  ## CORS Configuration
  CORS_ALLOW_ORIGIN: "*"
  CORS_ALLOW_METHODS: "GET,POST,PUT,DELETE"
  CORS_ALLOW_HEADERS: "*"
  CORS_ALLOW_CREDENTIALS: "False"
  CORS_MAX_AGES: "3600"
  GZIP_MIN_LENGTH: "512"
  # Trusted Hosts
  TRUSTED_HOSTS: "*"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://fta-mstr-addon-open-telemetry-opentelemetry-collector:4317"
  OTEL_EXPORTER_OTLP_HEADERS: ""
# ArgoCD Vault Plugin will replace the placeholders with the actual values from the Google Secret Manager
appSecret:
  annotations:
    secret-hash: "{{ (index .Values 'secretName' | sha256sum) }}"
    avp.kubernetes.io/path: "projects/781497044301/secrets/fta-dev-svc-profile"
    avp.kubernetes.io/secret-version: "latest"
  secrets:
    FIRESTORE_PROJECT_ID: <fta-dev-svc-profile | jsonPath {.FIRESTORE_PROJECT_ID}>
    FIRESTORE_DATABASE: <fta-dev-svc-profile | jsonPath {.FIRESTORE_DATABASE}>
    FIRESTORE_COLLECTION: <fta-dev-svc-profile | jsonPath {.FIRESTORE_COLLECTION}>

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations:
    iam.gke.io/gcp-service-account: "fta-dev-svc-profile@fta-platform.iam.gserviceaccount.com"
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "fta-dev-svc-profile"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "fta-dev-svc-profile-backendconfig"}'

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 512Mi

# # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /v1/healthcheck
    port: 8000
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 10
  # successThreshold: 1
  timeoutSeconds: 5
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: /v1/healthcheck
    port: 8000
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 5
  # successThreshold: 1
  timeoutSeconds: 3
  failureThreshold: 1

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 75
  targetMemoryUtilizationPercentage: 75

# Additional volumes on the output Deployment definition.
volumes:
  []
  # - name: env-secret
  #   secret:
  #     secretName: fta-dev-svc-profile
  #     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  []
  # - name: env-secret
  #   mountPath: "/app/.env"
  #   subPath: .env
  #   readOnly: true

nodeSelector:
  iam.gke.io/gke-metadata-server-enabled: "true"

tolerations: []

affinity: {}

backendConfig:
  healthCheck:
    checkIntervalSec: 30
    timeoutSec: 5
    healthyThreshold: 1
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /v1/healthcheck
    port: 8000

podDisruptionBudget:
  enabled: true
  minAvailable: 1
